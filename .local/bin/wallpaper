#!/bin/sh

# Sets the wallpaper using feh.

CACHE_FILE="$XDG_DATA_HOME/wallpaper-cache"
CACHE_SIZE=25
SIMULATE=0

# TODO: make getwallpaper look pretty

clearcache() {
    if [[ $(cat "$CACHE_FILE" | wc -l) -gt $1 ]]; then
        tail -n $1 "$CACHE_FILE" > "$CACHE_FILE.tmp"
        mv "$CACHE_FILE.tmp" "$CACHE_FILE"
    fi
}

setwallpaper() {
    # set given wallpaper from path, add path to cache
    feh --no-fehbg --bg-max "$@" &
    # echo "wallpapers that would have been set: $@"

    for path in "$@"; do
        echo "$(realpath "$path")" >> "$CACHE_FILE"
    done

    clearcache $CACHE_SIZE
}

pickwallpaper() {
    # get wallpaper, ensure wallpaper path is not in the cache
    num=$(($CACHE_SIZE + $1))
    while read file; do
        # the percent chance to get
        path=`realpath "$file"`
        if ! grep "$path" "$CACHE_FILE" && file -b --mime-type "$path" | grep "image"; then
            wallpapers+=("$path")
            [[ ${#wallpapers[@]} -eq $1 ]] && break
        fi
    done < <(find -L "$2" -type f | shuf -n $num) >/dev/null

    if [[ ${#wallpapers[@]} -ne $1 ]]; then
        echo "Not enough wallpapers in directory! Cache reduced to 5 lines."
        clearcache 5
        echo "Pass in --cache-size argument with proper amount of cache size (total number of wallpapers minus number of monitors)"
        exit 2
    fi
}

getwallpaper() {
    cat "$CACHE_FILE"
}

setup() {
    if [ ! -f "$CACHE_FILE" ]; then
        echo "Wallpaper cache file doesn't exist, creating..."
        touch "$CACHE_FILE"
    fi
}

isnum() {
    case $1 in
        ''|*[!0-9]*) return 1 ;;
        *) return 0 ;;
    esac
    return 1
}

isarg() {
    case $1 in
        -*|--*) return 0 ;;
    esac
    return 1
}

while (( "$#" )); do
    case "$1" in
        -h|--help)
            echo "Pass the directory to the wallpapers or any amount of files as parameters."
            exit 1 ;;
        -g|--get)
            getwallpaper
            exit 0 ;;
        --cache-file)
            if ! isarg "$2"; then
                CACHE_FILE="$2"
                shift
            else
                echo "Cache file argument is required"
                exit 1
            fi ;;
        --cache-size)
            if isarg "$2"; then
                echo "Cache file size argument is required"
                exit 1
            fi

            if isnum "$2"; then
               CACHE_SIZE="$2"
               shift
            else
                echo "Cache file size argument is not an integer"
                exit 1
            fi ;;
        --simulate)
            SIMULATE=1 ;;
        *)
            if [ -e "$1" ]; then
                break
            fi ;;
    esac
    shift
done

# echo "$CACHE_FILE $CACHE_SIZE $SIMULATE"

# if number of arguments is 0
if [[ $# -eq 0 ]]; then
    echo "No argument provided."
    exit 1
fi

if [ -d "$1" ]; then
    # pick random wallpaper(s) from the given folder

    # # of wallpapers to pick = number of screens
    n=$(xrandr --listmonitors | grep 'Monitors' | awk {'print $2'})

    declare -a wallpapers=()
    pickwallpaper $n "$1"
    setwallpaper "${wallpapers[@]}"
elif [ -f "$1" ]; then
    # wallpaper path provided and files exist (as images)
    if [ $(file -b --mime-type "$@" | grep "image" | wc -l) -eq "$#" ]; then
        setwallpaper "$@"
    else
        echo "Not all input files are images! $@"
        exit 1
    fi
fi
